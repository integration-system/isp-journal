package entry

import (
	"encoding/json"
	"testing"

	jsoniter "github.com/json-iterator/go"
	"github.com/mailru/easyjson"
)

var (
	e = &Entry{
		ModuleName: "some module name",
		Host:       "127.0.0.1:7788",
		Event:      "some event",
		Level:      "OK",
		Time:       "2006-01-02T15:04:05.999-07:00",
		Request:    []byte("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"),
		Response:   []byte("AkCAjRo90IXARLNX9oIpL2NU1cJ2I3NPDk838VQye1AwiObpOcJscE3CAzIktMDG2K5N80WOWSNx4RoHJQs2wDDbnKQWM9gFXuH4GKTG9c9ufbuqiw1hZWv64loIiRkg0OD2p8D4YsANIGh0XKXpWSKIRnCgn8UvnOX6e6KpERr1JrTUipRIG0vqF7RIn42w0bBAzRXHvqwEIjjsygjE6TBAhbhgWTql8mEKmG8vOiS0hAoLDt2UKRneTYB0dkr9rKF3Ca33rlnQ7BWPgnDJkcgMGtgCU80ZIYm2WU5Dtc9fMescV1WAtRSIRswFj9oxKJPtt2A6RhKoDYlNCyAVocoRWYIn4P3BBXfUtwbHvBuiTOUurs58AbXdmPAj6tnw3NhnJ3jsrILTsi1BQ70Tv57U5HtP3IgPHCWiY539e6HgR5FcKoUeyrvrtzCrr3jGYb5y4We0nMkGUNnTM6c1iKPNsvGmi8g59Lot2pF1A0xQ5pPjgyi4a1PPQTIZyjb9XIPgKcNEdQKo6rCHOrVO8hoHfsQfq41cm1uShAjwz1FaKb0iJEfvFfAbdxowEXPkoBGoASbl1m3uoWVgjcIMXOQlsqSXwEWXg4ZIHwvdKI4YWdyiDxwdVkXGBrNXF22qATyRr4I8xfE3zBw9ZIgZtG9Eq3UfRegopsxYzvFHP5ETzKXNnFeicnvkhoBKH91djnf7mHLQY1c8LUkIjPhGeZMunlt3NilzrEHWbgiA24WruJ9Xwszts6OSb64cBQcK5XlzqdmB5En7qaj5i9bIiazb9aEemesHdh3KlzNJxEiyZA0mzVlDqpAIIKmrDmaZpB3kIeP4teDFSUbTGojnEoVPngH6HFMVWdUSSbBIynF05oTyGFF2upOLNTLh17DAKHiEz05udDA6OvsGOxFqI2fWwRlIs8ovwSZL2Wy3lEq7phBgKIRRipbobnO0g1xQfKmYnmsA2utGtVuPSjriFA54CqqadJrwSP8cFYCxhRbHMdogZnAS7L5O2fsp20lQV7ruT6AltvvALbYvohT7XfgT0lhY6JbjLVvQqbdDDMAdFs5s76qEiKHYgeAgSn0JNR2qH74dveV8mI6mvEig6mJsLIJiG2lIdhhNenGZT5SIZEuIcbi7XWIDJCAfs05jndQ9GxRUn2WYXcymGYehJClUPDU0JQfZvEbCRwBREz4M3pXJXiinj8CqUhrfkncejYF81p0B1H31Oxf5bpqXQCqmc3Ss5Q35xWWq4uJCVd2WyO6WED0t3WRGYw2NgV4ZRLw3ub19oo4sdTTwUePC4LMBFYOlzW3Pn2ZbCDl8aG3sTbdZRFkTAVCKPDyDYzmteRTUK2kGmggeYNx1v26m1pcuUztx19mfzO2DsXk1W2lk8Yz3biHy4mktIisRK9wwD2RWIpOZmcaIzWOLInKbiVuagMBbrwblT0x97LPhnidM3fIjy04HpiD9FO7Ep58x7BV41lgohD3vhvWYT7RzOurfgRiSe1bbBq7fp6Q3kySFK3RBHca6YKwTKrf8E7TNfwqb7cDhH7K2fichALSOFvufKnRZdfhHMSEq4yDtaP5xrTmc0SZTvXUY5jOwDeDO3QDV9aKna9XCfMEC2uZx4a5LNUvSImzrlZoGQx9P8WtgVNEbOuRI6nW2pEATWt14JtremcyEXyfXsdLvWxMdplvagFSyNds0c8NY2YtpTlq4nIugvm79CvEUGI4p5MDjjbWYe2pUkpIWQ0UmQ0YKfVqjaftSh527gN2D5OSYlOWRYBn2gb9MxFi11QNUR1SupzxK4jyuUyUVvmh1hu98BTZheKmSGAL61nbJZmCEr60oczRldHDwYti1qDmFMwhtnEYOn6Cs7g1DqVDBw093ePW6DehYjEjq48rHeYYl0dLY6Hcp41VTe9B42p8AtFtj9TXqQd0ZiwdeTWDUYkWHTwVVA4LvSlaJFNz8POApYHPpsZLfNygsse6ocl6p9TW3SqEIGdDCncZlqXGX3Gc8JZ07HRK59KhuX4rOkb9xaMsxgzPHdc9osWAnsxBF8hQ0s4ceVTdjmtQLm36BGXrxUEdZSkMLWpFTgrCBlrrdlIxij5GIl8ZLuvxwLxX7Z66YFZuZVCHYPiNGRFLUuEiwktUfKnQSy7sId41TYJmkeMlwJ2u13tuIuR60dgxDBYzIgyG0vTjItu8hxOsLUBlSg3EQEiyDipQPHWnlSBrGAllwegvhASuCf7xe8jz1pBFy9HNA13GCT2lzkd6QUbNd983gmQ78UhWStjxuSPmB5DERlLYWQlw9md4WveCLo2RjXSfWCqYGmpsK5deNcfPsXjUh3RZkeEPBwWoZmUdUGJNbLB0bVwtrUaqwivsV2AcVcLYVQ9MdXyyLwytdrUB6l56JndFf7EdZRveSanK6NP57oW9VBKCjAaHGayw8XiWIt7fKfxmt161oeef6N1A0r8DoIC6KqPrBBEdQzbJ50PT8Tjqgo4MI0wJzPvBnI5Bb2DHDojDVD6RnupiYStZV42jBi4NF0XbCZBRZ0fX88OBJorw5rqutfblshvSVFIXGjgPACICDVyGjKmmfUMPWBNSkMPpHDQkYLS8yq0HCFPxYRfEag9KKdqavgFThcNHxb8VcMY8tnIdIAjPlh0Yc3sARtH1CLijDzpXN2jtXWrkhGD39wyQ3ytezzuI7LT1wixbbwUtJvIfBXbEuSW7voEXTGtWW0aN93VdgMNqTlWLdQmVaz1p1lqc5JUBgkUV6Uz92sU1Ayb2FO6Woz1Za6oSqoHzui9aQJN8GpNKSTCIdVhNC0i3xTib7vVkKrwQqfHfc3Dg4jFBNWRlHYPk97O7cMMlzae6TkxQoWSDlFEge7dbacEEXhCNfQpSDeOzwlcuq9T1tdEbKwGpIFp6m1vYB43jk1bsFlDlXWyhs1wR6gX3N7EVfom0nw3hQRLltxRucxEa7Oj8e6itjpEvcTwxL7RRyv3iNY21P4M5kdySGqfAnfBYlkkdKyp4PgvIRmnPCMCf7RbZ2CjoGOHpOdR5E5RskZ3rZL6Ne54Go95kj0BCrRCBNjCUvgvsIsWTg1m3JgtM5yalO668n2pvkdwl9UXj7QKwlNvymnmzNcD4CIfkryYoZceaRYR9Go1HNjiRyGyG55tXGhyqo3V57V4FWdtsPvUDEwK4MDlY5nfkIbNSyeKtyMRzxaUYzMLeOB9gOdZZLPnZubSm3edelmQmztYXLAt5p0WZ0RPRC92TSeGDx18dmtWaBuGCRkJCZmHeZ2xdQieXPvPiTGPwhyQ65PTy9HeziXcvPZgq7ck7iwDCSeTBZdbeA0FiHY9BL8NiZN3wI4MdygTHDu6TYHddx5kESwoeJHecGaExWjrIMf2Ae29B7lN48gCUhXxhUYqGL0Gjnt4l7J6q3TH7VW9p8h10GbtkwXGDZoD9t2Q5KfxnSbjVfJk47hTH1iKGeeSSotd7PlzcibtAYSzlj1XIkrXxYT4MzSyH3mtZeERvdqkfpiUB3D1Zb3tvjk6b43BQrDlQ2mnoZRnk8LXTpE6P3rIXgyDz8msj6DQCnmIdQ0EUkeinQ9IBVNZP4MaRE3xaUsNMnX2jloVraICxCBfiKPAxCXcrW98HRMSnVReRR1r4rjsR3fj2t7j9DbGTWWcwdquWZaiD7GYV41cIU3dfARBQ1NjCu3yqeIVa5N6NJELacl3c7nA1xyamLqikMsJYEkXdifHx7jNGJdioVfuIZ5eJSChKpT1ynJlEoWWjWEHF5ERDKjvIfWTCFfMw4WiZwplrd7szyJ7b9PHbnjMTq0L5t4uLG2IyXJd35Fy6YEQ7m0p87GzkxrZWxCEkWphiPtxnhhiKJzJqNSZCcDOyDzSXfMbESAdZlrFI5yGzoZ5KBN95MgWxpIGCbGQMKLXtpACVovZ0ATYv51cJIVNlXDb3TYRJlZHORz25XI1upEvPn2AuYcPC90Kn4nYgQju6gEbkAgcUeJxoucYpmC9ykGJ0zgMSRgItMKDnMFoknHQ5KtuZALMKyVs9DB83UZq1s2mfc7C43v3fRfASHHdLyJPrMcDwBm6LthVi8yOF4v7udO4l6JSf05AXPbLcy"),
	}
)

func BenchmarkEntryEncodingJsonMarshal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_, err := json.Marshal(e)
		if err != nil {
			panic(err)
		}
	}
}

func BenchmarkEntryJsoniterJsonMarshaling(b *testing.B) {
	jsonIter := jsoniter.ConfigFastest
	for i := 0; i < b.N; i++ {
		_, err := jsonIter.Marshal(e)
		if err != nil {
			panic(err)
		}
	}
}

func BenchmarkEntryEasyjsonJsonMarshaling(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_, err := easyjson.Marshal(e)
		if err != nil {
			panic(err)
		}
	}
}
